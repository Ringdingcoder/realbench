.text
fill:
	push   %esi
	mov    %eax,%esi
.L1:
	cmp    %edx,%esi
	je     .L2
	mov    (%ebx),%al
	mov    %al,(%esi)
	inc    %esi
	jmp    .L1
.L2:
	pop    %esi
	ret

	.globl hash256_block
hash256_block:
	push   %ebx
	push   %esi
	push   %edi
	push   %ebp
	mov    %esp,%ebp
	sub    $0x14c,%esp
	xor    %eax,%eax
	mov    %ax,-0x4c(%ebp)
	mov    %ax,-0x4a(%ebp)
	lea    -0x4c(%ebp),%ebx
	lea    -0x4c(%ebp),%edx
	lea    -0x14c(%ebp),%eax
	call   fill
	xor    %edi,%edi
.L108:
	mov    %edi,%esi
	shl    %si
	shl    %si
	mov    0x18(%ebp),%ebx
	add    %esi,%ebx
	mov    (%ebx),%ah
	mov    0x1(%ebx),%al
	xor    %dh,%dh
	movw   $0x0,-0x40(%ebp)
	mov    %ax,-0x3a(%ebp)
	mov    0x2(%ebx),%al
	xor    %ah,%ah
	xor    %dl,%dl
	mov    $0x8,%ecx
.L109:
	shl    %ax
	rcl    %dx
	loop   .L109
	mov    -0x40(%ebp),%cx
	or     %ax,%cx
	or     -0x3a(%ebp),%dx
	mov    0x3(%ebx),%al
	xor    %ah,%ah
	or     %cx,%ax
	mov    %ax,-0x14c(%esi,%ebp,1)

	mov    %dx,-0x14a(%esi,%ebp,1)

	inc    %edi
	cmp    $0x10,%edi
	jb     .L108
	movw   $0x10,-0x10(%ebp)
.L110:
	movzwl -0x10(%ebp),%esi
	shl    %si
	shl    %si
	mov    -0x154(%esi,%ebp,1),%ax

	mov    %ax,-0x14(%ebp)
	mov    -0x152(%esi,%ebp,1),%ax

	mov    %ax,-0x6(%ebp)
	mov    -0x14(%ebp),%ax
	mov    -0x6(%ebp),%dx
	mov    $0xf,%ecx
.L111:
	shl    %ax
	rcl    %dx
	loop   .L111
	mov    -0x6(%ebp),%bx
	shr    %bx
	or     %ax,%bx
	mov    %bx,-0x40(%ebp)
	mov    -0x14(%ebp),%ax
	mov    -0x6(%ebp),%di
	mov    $0xd,%ecx
.L112:
	shl    %ax
	rcl    %di
	loop   .L112
	mov    $0x3,%cl
	mov    -0x6(%ebp),%bx
	shr    %cl,%bx
	or     %bx,%ax
	mov    -0x40(%ebp),%bx
	xor    %ax,%bx
	xor    %dx,%di
	mov    -0x14(%ebp),%ax
	mov    -0x6(%ebp),%dx
	mov    $0xa,%ecx
.L113:
	shr    %dx
	rcr    %ax
	loop   .L113
	xor    %bx,%ax
	xor    %di,%dx
	mov    -0x168(%esi,%ebp,1),%bx

	add    %ax,%bx
	mov    %bx,-0x38(%ebp)
	mov    -0x166(%esi,%ebp,1),%ax

	adc    %dx,%ax
	mov    %ax,-0x30(%ebp)
	mov    -0x188(%esi,%ebp,1),%bx

	mov    -0x186(%esi,%ebp,1),%di

	mov    $0x9,%cl
	mov    %bx,%ax
	shl    %cl,%ax
	mov    %ax,-0x3a(%ebp)
	mov    %bx,%ax
	mov    %di,%dx
	mov    $0x7,%ecx
.L114:
	shr    %dx
	rcr    %ax
	loop   .L114
	mov    %ax,-0x3e(%ebp)
	mov    -0x3a(%ebp),%ax
	or     %dx,%ax
	mov    %ax,-0x3a(%ebp)
	mov    %bx,%ax
	mov    %di,%dx
	mov    $0xe,%ecx
.L115:
	shl    %ax
	rcl    %dx
	loop   .L115
	mov    %di,%cx
	shr    %cx
	shr    %cx
	or     %cx,%ax
	mov    -0x3e(%ebp),%cx
	xor    %ax,%cx
	mov    %cx,-0x32(%ebp)
	mov    -0x3a(%ebp),%ax
	xor    %dx,%ax
	mov    %ax,-0x2c(%ebp)
	mov    %bx,%ax
	mov    %di,%dx
	mov    $0x3,%ecx
.L116:
	shr    %dx
	rcr    %ax
	loop   .L116
	xor    -0x32(%ebp),%ax
	xor    -0x2c(%ebp),%dx
	add    -0x38(%ebp),%ax
	adc    -0x30(%ebp),%dx
	add    -0x18c(%esi,%ebp,1),%ax

	adc    -0x18a(%esi,%ebp,1),%dx

	mov    %ax,-0x14c(%esi,%ebp,1)

	mov    %dx,-0x14a(%esi,%ebp,1)

	incw   -0x10(%ebp)
	cmpw   $0x40,-0x10(%ebp)
	jae    .L117
	jmp    .L110
.L117:
	mov    0x14(%ebp),%ebx
	mov    (%ebx),%bx
	mov    0x14(%ebp),%esi
	mov    0x2(%esi),%ax
	mov    %ax,-0x2(%ebp)
	mov    0x4(%esi),%ax
	mov    %ax,-0xa(%ebp)
	mov    0x6(%esi),%ax
	mov    %ax,-0xe(%ebp)
	mov    0x8(%esi),%ax
	mov    %ax,-0x8(%ebp)
	mov    0xa(%esi),%ax
	mov    %ax,-0xc(%ebp)
	mov    0xc(%esi),%ax
	mov    %ax,-0x24(%ebp)
	mov    0xe(%esi),%ax
	mov    %ax,-0x22(%ebp)
	mov    0x10(%esi),%si
	mov    0x14(%ebp),%edi
	mov    0x12(%edi),%ax
	mov    %ax,-0x4(%ebp)
	mov    0x14(%edi),%ax
	mov    %ax,-0x1c(%ebp)
	mov    0x16(%edi),%ax
	mov    %ax,-0x16(%ebp)
	mov    0x18(%edi),%ax
	mov    %ax,-0x1a(%ebp)
	mov    0x1a(%edi),%ax
	mov    %ax,-0x18(%ebp)
	mov    0x1c(%edi),%dx
	mov    0x1e(%edi),%ax
	movw   $0x0,-0x12(%ebp)
.L118:
	movzwl -0x12(%ebp),%ecx
	mov    $0xa,%cl
	mov    %si,%di
	shl    %cl,%di
	mov    %si,-0x48(%ebp)
	mov    -0x4(%ebp),%cx
	mov    %cx,-0x46(%ebp)
	mov    $0x6,%ecx
.L119:
	shrw   -0x46(%ebp)
	rcrw   -0x48(%ebp)
	loop   .L119
	mov    -0x48(%ebp),%cx
	mov    %cx,-0x3e(%ebp)
	mov    -0x46(%ebp),%cx
	or     %di,%cx
	mov    %cx,-0x3a(%ebp)
	mov    $0x5,%cl
	mov    %si,%di
	shl    %cl,%di
	mov    %si,-0x48(%ebp)
	mov    -0x4(%ebp),%cx
	mov    %cx,-0x46(%ebp)
	mov    $0xb,%ecx
.L120:
	shrw   -0x46(%ebp)
	rcrw   -0x48(%ebp)
	loop   .L120
	mov    -0x48(%ebp),%cx
	mov    %cx,-0x40(%ebp)
	mov    -0x46(%ebp),%cx
	or     %di,%cx
	mov    -0x3e(%ebp),%di
	xor    -0x40(%ebp),%di
	mov    %di,-0x36(%ebp)
	mov    -0x3a(%ebp),%di
	xor    %cx,%di
	mov    %di,-0x2a(%ebp)
	mov    %si,-0x48(%ebp)
	mov    -0x4(%ebp),%cx
	mov    %cx,-0x46(%ebp)
	mov    $0x7,%ecx
.L121:
	shlw   -0x48(%ebp)
	rclw   -0x46(%ebp)
	loop   .L121
	mov    $0x9,%cl
	mov    -0x4(%ebp),%di
	shr    %cl,%di
	mov    %di,%cx
	or     -0x48(%ebp),%cx
	mov    -0x36(%ebp),%di
	xor    %cx,%di
	mov    -0x2a(%ebp),%cx
	xor    -0x46(%ebp),%cx
	add    %dx,%di
	mov    %di,-0x40(%ebp)
	mov    %cx,%dx
	adc    %ax,%dx
	mov    %si,%ax
	not    %ax
	mov    -0x4(%ebp),%cx
	not    %cx
	mov    -0x1a(%ebp),%di
	and    %ax,%di
	mov    -0x18(%ebp),%ax
	and    %cx,%ax
	mov    %ax,-0x3e(%ebp)
	mov    -0x1c(%ebp),%cx
	and    %si,%cx
	mov    -0x4(%ebp),%ax
	and    -0x16(%ebp),%ax
	xor    %di,%cx
	xor    -0x3e(%ebp),%ax
	add    -0x40(%ebp),%cx
	adc    %dx,%ax
	movzwl -0x12(%ebp),%edi
	shl    %di
	shl    %di
	mov    add_constant(%edi),%dx
	add    %cx,%dx
	adc    2+add_constant(%edi),%ax
	mov    -0x14c(%edi,%ebp,1),%cx

	add    %dx,%cx
	mov    %cx,-0x20(%ebp)
	mov    -0x14a(%edi,%ebp,1),%dx

	adc    %ax,%dx
	mov    %dx,-0x1e(%ebp)
	mov    $0xe,%cl
	mov    %bx,%ax
	shl    %cl,%ax
	mov    %ax,-0x3a(%ebp)
	mov    %bx,%ax
	mov    -0x2(%ebp),%dx
	shr    %dx
	rcr    %ax
	shr    %dx
	rcr    %ax
	mov    %ax,-0x40(%ebp)
	mov    -0x3a(%ebp),%ax
	or     %dx,%ax
	mov    %ax,-0x3e(%ebp)
	mov    $0x3,%cl
	mov    %bx,%di
	shl    %cl,%di
	mov    %bx,%ax
	mov    -0x2(%ebp),%dx
	mov    $0xd,%ecx
.L122:
	shr    %dx
	rcr    %ax
	loop   .L122
	or     %di,%dx
	mov    -0x40(%ebp),%cx
	xor    %ax,%cx
	mov    %cx,-0x34(%ebp)
	mov    -0x3e(%ebp),%ax
	xor    %dx,%ax
	mov    %ax,-0x2e(%ebp)
	mov    %bx,%ax
	mov    -0x2(%ebp),%dx
	mov    $0xa,%ecx
.L123:
	shl    %ax
	rcl    %dx
	loop   .L123
	mov    $0x6,%cl
	mov    -0x2(%ebp),%di
	shr    %cl,%di
	or     %di,%ax
	mov    -0x34(%ebp),%cx
	xor    %ax,%cx
	mov    %cx,-0x44(%ebp)
	mov    -0x2e(%ebp),%ax
	xor    %dx,%ax
	mov    %ax,-0x3c(%ebp)
	mov    -0xa(%ebp),%dx
	and    %bx,%dx
	mov    -0x2(%ebp),%ax
	and    -0xe(%ebp),%ax
	mov    %ax,-0x3e(%ebp)
	mov    -0x8(%ebp),%ax
	and    %bx,%ax
	mov    -0x2(%ebp),%cx
	and    -0xc(%ebp),%cx
	xor    %ax,%dx
	mov    -0x3e(%ebp),%ax
	xor    %cx,%ax
	mov    %ax,-0x3e(%ebp)
	mov    -0xa(%ebp),%ax
	and    -0x8(%ebp),%ax
	mov    -0xe(%ebp),%cx
	and    -0xc(%ebp),%cx
	xor    %dx,%ax
	xor    -0x3e(%ebp),%cx
	mov    -0x44(%ebp),%di
	add    %ax,%di
	mov    -0x3c(%ebp),%ax
	adc    %cx,%ax
	mov    %ax,-0x42(%ebp)
	mov    -0x1a(%ebp),%dx
	mov    -0x18(%ebp),%ax
	mov    -0x1c(%ebp),%cx
	mov    %cx,-0x1a(%ebp)
	mov    -0x16(%ebp),%cx
	mov    %cx,-0x18(%ebp)
	mov    %si,-0x1c(%ebp)
	mov    -0x4(%ebp),%cx
	mov    %cx,-0x16(%ebp)
	mov    -0x24(%ebp),%cx
	add    -0x20(%ebp),%cx
	mov    %cx,-0x28(%ebp)
	mov    -0x22(%ebp),%cx
	adc    -0x1e(%ebp),%cx
	mov    %cx,-0x26(%ebp)
	mov    -0x28(%ebp),%si
	mov    %cx,-0x4(%ebp)
	mov    -0x8(%ebp),%cx
	mov    %cx,-0x24(%ebp)
	mov    -0xc(%ebp),%cx
	mov    %cx,-0x22(%ebp)
	mov    -0xa(%ebp),%cx
	mov    %cx,-0x8(%ebp)
	mov    -0xe(%ebp),%cx
	mov    %cx,-0xc(%ebp)
	mov    %bx,-0xa(%ebp)
	mov    -0x2(%ebp),%bx
	mov    %bx,-0xe(%ebp)
	add    -0x20(%ebp),%di
	mov    -0x1e(%ebp),%cx
	adc    -0x42(%ebp),%cx
	mov    %di,%bx
	mov    %cx,-0x2(%ebp)
	incw   -0x12(%ebp)
	cmpw   $0x40,-0x12(%ebp)
	jae    .L124
	jmp    .L118
.L124:
	mov    0x14(%ebp),%ebx
	add    %di,(%ebx)
	adc    %cx,0x2(%ebx)
	mov    -0xa(%ebp),%bx
	mov    0x14(%ebp),%esi
	add    %bx,0x4(%esi)
	mov    -0xe(%ebp),%bx
	adc    %bx,0x6(%esi)
	mov    -0x8(%ebp),%bx
	add    %bx,0x8(%esi)
	mov    -0xc(%ebp),%bx
	adc    %bx,0xa(%esi)
	mov    -0x24(%ebp),%bx
	add    %bx,0xc(%esi)
	mov    -0x22(%ebp),%bx
	adc    %bx,0xe(%esi)
	mov    -0x28(%ebp),%bx
	add    %bx,0x10(%esi)
	mov    -0x26(%ebp),%bx
	adc    %bx,0x12(%esi)
	mov    -0x1c(%ebp),%bx
	add    %bx,0x14(%esi)
	mov    -0x16(%ebp),%bx
	adc    %bx,0x16(%esi)
	mov    -0x1a(%ebp),%bx
	add    %bx,0x18(%esi)
	mov    -0x18(%ebp),%bx
	adc    %bx,0x1a(%esi)
	add    %dx,0x1c(%esi)
	adc    %ax,0x1e(%esi)
	xor    %eax,%eax
.L125:
	inc    %ax
	cmp    $0x8,%ax
	jb     .L125
	leave
	pop    %edi
	pop    %esi
	pop    %ebx
	ret

.data
add_constant:
	.long	1116352408
	.long	1899447441
	.long	-1245643825
	.long	-373957723
	.long	961987163
	.long	1508970993
	.long	-1841331548
	.long	-1424204075
	.long	-670586216
	.long	310598401
	.long	607225278
	.long	1426881987
	.long	1925078388
	.long	-2132889090
	.long	-1680079193
	.long	-1046744716
	.long	-459576895
	.long	-272742522
	.long	264347078
	.long	604807628
	.long	770255983
	.long	1249150122
	.long	1555081692
	.long	1996064986
	.long	-1740746414
	.long	-1473132947
	.long	-1341970488
	.long	-1084653625
	.long	-958395405
	.long	-710438585
	.long	113926993
	.long	338241895
	.long	666307205
	.long	773529912
	.long	1294757372
	.long	1396182291
	.long	1695183700
	.long	1986661051
	.long	-2117940946
	.long	-1838011259
	.long	-1564481375
	.long	-1474664885
	.long	-1035236496
	.long	-949202525
	.long	-778901479
	.long	-694614492
	.long	-200395387
	.long	275423344
	.long	430227734
	.long	506948616
	.long	659060556
	.long	883997877
	.long	958139571
	.long	1322822218
	.long	1537002063
	.long	1747873779
	.long	1955562222
	.long	2024104815
	.long	-2067236844
	.long	-1933114872
	.long	-1866530822
	.long	-1538233109
	.long	-1090935817
	.long	-965641998
